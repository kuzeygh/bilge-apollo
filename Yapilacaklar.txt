
Öncelikli Yapılacaklar:

2) Taslaklardaki yayımla çalışmıyor ayrıca yayımlardaki Yayımlayı kaldır. 
3) Butonlardan altı çizgili yazı yazmak istendiği zaman bütün bloku seçiyor.
4) Bir makale yayımlanırsa taslaklar sekmesinden yayınlar sekmesine geçiş yapmayı dene.
5) Editorde yazı yazarken toolbar olarak hangi eleman kullanılırsa onu renkli veya karşıt renkler kullanılarak göstermek gerekiyor.
6) Herhangi bir component oluşturulmadan önce bir animasyon ekleme işi yap. Bunun için kalın, italic gibi işlemler yapılınca render 
  ... edilen Typograhpy componentlerından önce yapabiliriz.
7) Makalelerin altına Teşekkür et butonu koy bunu websocketlerle birlikte kullan yani dinamik olarak gösterilsin. 
8) Her bir makalenin altına yorum özelliği getir.
9) Kullanıcının profilinde değişiklik yapabilmesine izin vermek için hesap componenti yap ayrıca bu componenta avatar resim ekleme özelliği olsun.
10) Yeni bir post yaratılınca direkt olarak yayımlama konumuna geçiyor bu hataya baklamalısın.




Düşük öncelikli yapılacaklar.
1) Editor edit veya create halindeyken hyperlink ler için preview özelliği ekle.
2) Avatar vs resimleri işlemek için bir teknoloji var mı ona bak.
3) PostListItemActions bileşeninde kullanılan iconları font-awesome ikonları ile değiştir.

 

Yapılanlar:
S.1) Post edit kısmını çalıştır.
S.2) User-Display ekranından aşağıdaki post list item ile ilgili olan kısım düzeltilecek
  C.2) Sorun Typograhpy de kullanılan component propunu componen olarak verdiğim için meydana geldi.
S.3) Bir kere düzenleye bastıkdan sonra ardında ikinci gidişte query sıkıntısı var.
  C.3) Sorun Query componentina fetchPolicy="network-only" verilerek çözüldü.
S.4) Düzenleme butonuna bastıktan sonra text editore focus işlemi yapılacak.
  C.4) TextField component' ına autoFocus propu verilerek sorun çözüldü.
S.5) 1) Text editore butonlar koy
  C.5) event geçilerek yapıldı.
S.6) Editor içine link ekle.
S.7) Editor içinde image eklemeye yap
  C.7) apollo-upload-client kullanılarak createUpdateLink kuruldu server tarafındada data model ve 
    ... serverdaki mutation ve resolver işlemleri yapıldı.
S.8) Daha sonra image la birlikte create, change ve display özelliklerini tamamla.
S.9) Editor de yer alan <p>, <code> vs. elementlerin material ui Typograhpy componentı ile değiştir.
  C.9) Sorun Typograhpy style kısmına 
S.10) Aşağıdaki maddeyi çözebilmek için app seviyesinde bir değişken tutma ihtiyacı var. Çünkü componentler yıkıla yıkıla geldiğinden dolayı
  ... bunun bir şekilde en yukarıdan default ile verilerek çekilmesi gerekmektedir. Bunun sorunun asıl çıkış nedeni aşağıdaki süreç isteği.
      ... Hesaptan yayımdaki makaleleri gösterdikten sonra tekrar o tabda kalmalı.
  C.10) Yukarıdaki ki sorun aynı şekilde yani local state kullanılarak çözüldü. Bunun için uygulama seviyesinde bir local state apollo-link-state
  ... kullanılarak çözüldü. 
S.11) Editorde yer alan hyperlink componentını material ui Link component ile değiştir.
  C.12) Materialui deki <Link /> componenti kullanılarak çözüldü.
S.12) UserLogin yapıldıktan sonra user ekranına geçerken verileri alıyoruz.
  C.12) Userlogin giriş yapıldıktan sonra menu local stateden alınan userId'ye göre rotalar render edildi.
S.13) UserDisplay yapılırken kullanılan TAKE_USER 'da id, name, email 'leri userLogin cacheni kullanak çekebeliriz.
  C.13) Server tarafında ve client tarafındaki userPostById querysi eklendi.
S.14) PostDetail basıldığı zaman tekrar query çekmemize gerek yok bunun için lokal state management kullanılmalı
  C.14) Sorun posts queryisinden fragment kullanılarak çözüldü.
S.15) Text editor içindeki mutate ve query aynı anda yapılan işlem client.mutate fonksiyonunun refetchQueries opsiyonunu kullan.
  C.15) Buradaki refetch 'den kasıt aynı mutation yapmış olduğumuz dosyayı değil başka queryleri alabilmek için kullanılıyor.
S.16) UserDisplay ekranından f5 yapınca hata alınıyor.
  C.16) Sorun giderildi. UserDisplay ekranın önüne UserDisplayQuery componentı yerleştirilerek giderildi.
S.17) TextEditorun user interfacedinde butonları material ui de kullanılan button grubun içine al ve ek olarak user interfacedinde
  ... biraz değişiklik yap. 
  C.17) Geliştirme font-awesome fontları kullanılark çözüldü. Ayrıca bu işleminden sonrada Toolbar adında yeni bir component oluşturuldu.
S.18) Kullanıcı girişinde hatalı bir giriş olduğu zaman bunu kullanıcıya nasıl yansıtacağız.
  C.18) Detaylı bir error handling yapılmadı sadece kullanıcı girdiği zaman mutate onError'dan hatayı yakaladık daha sonra state'de gösterdik.
S.19) TextEditor de render edilen Material ui elementlerine slide ekle
  C.19) Text editörün içine font değiştirme işlemlerinde material ui den Grow elementi kullanıldı.